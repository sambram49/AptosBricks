[{"D:\\Aptos-NFT-Mint-main\\mint-site\\pages\\index.js":"1","D:\\Aptos-NFT-Mint-main\\mint-site\\pages\\_app.js":"2"},{"size":9149,"mtime":1666478050000,"results":"3","hashOfConfig":"4"},{"size":1132,"mtime":1666478050000,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"9"},"jafp4m",{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Aptos-NFT-Mint-main\\mint-site\\pages\\index.js",["13","14","15","16","17","18","19"],[],"import Head from 'next/head'\nimport React, { useEffect, useState } from 'react';\nimport styles from '../styles/Home.module.css'\n\nimport { AptosClient } from \"aptos\";\nimport { useWallet } from '@manahippo/aptos-wallet-adapter';\nimport cmHelper from \"../helpers/candyMachineHelper\"\nimport ConnectWalletButton from '../helpers/Aptos/ConnectWalletButton';\nimport {candyMachineAddress, collectionName, collectionCoverUrl, NODE_URL} from \"../helpers/candyMachineInfo\"\n\nimport Spinner from \"react-bootstrap/Spinner\"\nimport Modal from \"react-bootstrap/Modal\"\n\nimport { toast } from 'react-toastify';\n\nconst aptosClient = new AptosClient(NODE_URL);\nconst autoCmRefresh = 10000;\n\nexport default function Home() {\n  const wallet = useWallet();\n  const [isFetchignCmData, setIsFetchignCmData] = useState(false)\n  const [candyMachineData, setCandyMachineData] = useState({data: {}, fetch: fetchCandyMachineData})\n  const [timeLeftToMint, setTimeLeftToMint] = useState({presale: \"\", public: \"\", timeout: null})\n\n  const [mintInfo, setMintInfo] = useState({numToMint: 1, minting: false, success: false, mintedNfts: []})\n\n  const [canMint, setCanMint] = useState(false)\n\n  useEffect(() => {\n    if (!wallet.autoConnect && wallet.wallet?.adapter) {\n        wallet.connect();\n    }\n  }, [wallet.autoConnect, wallet.wallet, wallet.connect]);\n\n  const mint = async () => {\n    if (wallet.account?.address?.toString() === undefined || mintInfo.minting) return;\n\n    console.log(wallet.account?.address?.toString());\n    setMintInfo({...mintInfo, minting: true})\n    // Generate a transaction\n    const payload = {\n      type: \"entry_function_payload\",\n      function: \"0xc071ef709539f7f9372f16050bf984fe6f11850594b8394f11bc74d22f48836b::candy_machine_v2::mint_tokens\",\n      type_arguments: [],\n      arguments: [\n      \tcandyMachineAddress,\n\t      collectionName,\n\t      mintInfo.numToMint,\n      ]\n    };\n\n    let txInfo;\n    try {\n      const txHash = await wallet.signAndSubmitTransaction(payload);\n      console.log(txHash);\n      txInfo = await aptosClient.waitForTransactionWithResult(txHash.hash)\n    } catch (err) {\n      txInfo = {\n        success: false,\n        vm_status: err.message,\n      }\n    }\n    handleMintTxResult(txInfo)\n    if (txInfo.success) setCandyMachineData({...candyMachineData, data: {...candyMachineData.data, numMintedTokens: (parseInt(candyMachineData.data.numMintedTokens) + parseInt(mintInfo.numToMint)).toString()}})\n  }\n\n  async function handleMintTxResult(txInfo) {\n    console.log(txInfo);\n    const mintSuccess = txInfo.success;\n    console.log(mintSuccess ? \"Mint success!\" : `Mint failure, an error occured.`)\n\n    let mintedNfts = []\n    if (!mintSuccess) {\n        /// Handled error messages\n        const handledErrorMessages = new Map([\n            [\"Failed to sign transaction\", \"An error occured while signing.\"],\n            [\"Move abort in 0x1::coin: EINSUFFICIENT_BALANCE(0x10006): Not enough coins to complete transaction\", \"Insufficient funds to mint.\"],\n        ]);\n\n        const txStatusError = txInfo.vm_status;\n        console.error(`Mint not successful: ${txStatusError}`);\n        let errorMessage = handledErrorMessages.get(txStatusError);\n        errorMessage = errorMessage === undefined ? \"Unkown error occured. Try again.\" : errorMessage;\n\n        toast.error(errorMessage);\n    } else {\n        mintedNfts = await cmHelper.getMintedNfts(aptosClient, candyMachineData.data.tokenDataHandle, candyMachineData.data.cmResourceAccount, collectionName, txInfo)\n        toast.success(\"Minting success!\")\n    }\n\n    \n    setMintInfo({...mintInfo, minting: false, success: mintSuccess, mintedNfts})\n}\n\n\n\n  async function fetchCandyMachineData(indicateIsFetching = false) {\n    console.log(\"Fetching candy machine data...\")\n    if (indicateIsFetching) setIsFetchignCmData(true)\n    const cmResourceAccount = await cmHelper.getCandyMachineResourceAccount();\n    if (cmResourceAccount === null) {\n      setCandyMachineData({...candyMachineData, data: {}})\n      setIsFetchignCmData(false)\n      return\n    }\n\n    const collectionInfo = await cmHelper.getCandyMachineCollectionInfo(cmResourceAccount);\n    const configData = await cmHelper.getCandyMachineConfigData(collectionInfo.candyMachineConfigHandle);\n    setCandyMachineData({...candyMachineData, data: {cmResourceAccount, ...collectionInfo, ...configData}})\n    setIsFetchignCmData(false)\n  }\n\n  function verifyTimeLeftToMint() {\n    const mintTimersTimeout = setTimeout(verifyTimeLeftToMint, 1000)\n    if (candyMachineData.data.presaleMintTime === undefined || candyMachineData.data.publicMintTime === undefined) return\n\n    const currentTime = Math.round(new Date().getTime() / 1000);\n    setTimeLeftToMint({timeout : mintTimersTimeout, presale: cmHelper.getTimeDifference(currentTime, candyMachineData.data.presaleMintTime), public: cmHelper.getTimeDifference(currentTime, candyMachineData.data.publicMintTime)})\n  }\n\n  useEffect(() => {\n    fetchCandyMachineData(true)\n    setInterval(fetchCandyMachineData, autoCmRefresh)\n  }, [])\n\n  useEffect(() => {\n    clearTimeout(timeLeftToMint.timeout)\n    verifyTimeLeftToMint()\n    console.log(candyMachineData.data)\n  }, [candyMachineData])\n\n  useEffect(() => {\n    setCanMint(wallet.connected && candyMachineData.data.isPublic && parseInt(candyMachineData.data.numUploadedTokens) > parseInt(candyMachineData.data.numMintedTokens) && timeLeftToMint.presale === \"LIVE\")\n  }, [wallet, candyMachineData, timeLeftToMint])\n\n  return (\n    <div className=\"bg-gray-500\">\n      <div className={styles.container}>\n        <Head>\n          <title>Aptos NFT Mint</title>\n          <meta name=\"description\" content=\"Aptos NFT Mint\" />\n          <link rel=\"icon\" href=\"/favicon.ico\" />\n        </Head>\n\n        <main className={styles.main}>\n          <h1 className={styles.title}>\n            {collectionName} Mint\n          </h1>\n          <div className={styles.topcorner}>\n            <ConnectWalletButton connectButton={!wallet.connected} className=\"d-flex\" />\n          </div>\n          <img src={collectionCoverUrl} style={{ width: \"480px\", height:\"480px\" }} />\n          <div id=\"collection-info\" className=\"d-flex flex-column align-items-center text-white\" style={{width: \"80%\"}}>\n            {isFetchignCmData ? <Spinner animation=\"border\" role=\"status\" className=\"mt-5\"><span className=\"visually-hidden\">Loading...</span></Spinner> : \n            <>\n              <div className=\"d-flex align-items-center my-3\">\n                <input className={`${styles.defaultInput} me-3`} type=\"number\" min=\"1\" max={candyMachineData.data.maxMintsPerWallet === undefined ? 10 : Math.min(candyMachineData.data.maxMintsPerWallet, candyMachineData.data.numUploadedTokens - candyMachineData.data.numMintedTokens)} value={mintInfo.numToMint} onChange={(e) => setMintInfo({...mintInfo, numToMint: e.target.value})} />\n                <button className={styles.button} onClick={mint} disabled={!canMint}>{mintInfo.minting ? <Spinner animation=\"border\" role=\"status\"><span className=\"visually-hidden\">Loading...</span></Spinner> : \"Mint\"}</button>\n                <h4 className=\"mx-3 mb-0\">{candyMachineData.data.mintFee * mintInfo.numToMint} $APT</h4>\n                <span style={{width: \"15px\", height: \"15px\", borderRadius: \"50%\", background: candyMachineData.data.isPublic ? \"green\" : \"red\"}}></span>\n              </div>\n              <h5>{candyMachineData.data.numMintedTokens}/{candyMachineData.data.numUploadedTokens} minted</h5>\n              <div className=\"d-flex flex-column align-items-center my-3\">\n                <h3 style={{textDecoration: \"underline\"}}>Presale In:</h3>\n                <h6>{timeLeftToMint.presale === \"LIVE\" ? \"LIVE\" : timeLeftToMint.presale.days + \" days : \" + timeLeftToMint.presale.hours + \" hours : \" + timeLeftToMint.presale.minutes + \" minutes : \" + timeLeftToMint.presale.seconds + \" seconds\"}</h6>\n              </div>\n              <div className=\"d-flex flex-column align-items-center my-3\">\n                <h3 style={{textDecoration: \"underline\"}}>Public In:</h3>\n                <h6>{timeLeftToMint.public === \"LIVE\" ? \"LIVE\" : timeLeftToMint.public.days + \" days : \" + timeLeftToMint.public.hours + \" hours : \" + timeLeftToMint.public.minutes + \" minutes : \" + timeLeftToMint.public.seconds + \" seconds\"}</h6>\n              </div>\n            </>}\n          </div>\n\n          <Modal id=\"mint-results-modal\" show={mintInfo.success} onHide={() => setMintInfo({...mintInfo, success: false, mintedNfts: []})} centered size=\"lg\">\n            <Modal.Body className=\"d-flex flex-column align-items-center pt-5 pb-3\">\n                <div className=\"d-flex justify-content-center w-100 my-5\" style={{flexWrap: \"wrap\"}}>\n                    {mintInfo.mintedNfts.map(mintedNft => <div key={mintedNft.name} className={`${styles.mintedNftCard} d-flex flex-column mx-3`}>\n                        <img src={mintedNft.imageUri === null ? \"\" : mintedNft.imageUri} />\n                        <h5 className=\"text-white text-center mt-2\">{mintedNft.name}</h5>\n                    </div>)}\n                </div>\n            </Modal.Body>\n        </Modal>\n        </main>\n\n      </div>\n    </div>\n  )\n}\n","D:\\Aptos-NFT-Mint-main\\mint-site\\pages\\_app.js",[],[],{"ruleId":"20","severity":1,"message":"21","line":33,"column":6,"nodeType":"22","endLine":33,"endColumn":57,"suggestions":"23"},{"ruleId":"20","severity":1,"message":"24","line":124,"column":6,"nodeType":"22","endLine":124,"endColumn":8,"suggestions":"25"},{"ruleId":"20","severity":1,"message":"26","line":130,"column":6,"nodeType":"22","endLine":130,"endColumn":24,"suggestions":"27"},{"ruleId":"28","severity":1,"message":"29","line":152,"column":11,"nodeType":"30","endLine":152,"endColumn":86},{"ruleId":"31","severity":1,"message":"32","line":152,"column":11,"nodeType":"30","endLine":152,"endColumn":86},{"ruleId":"28","severity":1,"message":"29","line":178,"column":25,"nodeType":"30","endLine":178,"endColumn":92},{"ruleId":"31","severity":1,"message":"32","line":178,"column":25,"nodeType":"30","endLine":178,"endColumn":92},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'wallet'. Either include it or remove the dependency array.","ArrayExpression",["33"],"React Hook useEffect has a missing dependency: 'fetchCandyMachineData'. Either include it or remove the dependency array.",["34"],"React Hook useEffect has missing dependencies: 'timeLeftToMint.timeout' and 'verifyTimeLeftToMint'. Either include them or remove the dependency array.",["35"],"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"36","fix":"37"},{"desc":"38","fix":"39"},{"desc":"40","fix":"41"},"Update the dependencies array to be: [wallet.autoConnect, wallet.wallet, wallet.connect, wallet]",{"range":"42","text":"43"},"Update the dependencies array to be: [fetchCandyMachineData]",{"range":"44","text":"45"},"Update the dependencies array to be: [candyMachineData, timeLeftToMint.timeout, verifyTimeLeftToMint]",{"range":"46","text":"47"},[1269,1320],"[wallet.autoConnect, wallet.wallet, wallet.connect, wallet]",[5022,5024],"[fetchCandyMachineData]",[5159,5177],"[candyMachineData, timeLeftToMint.timeout, verifyTimeLeftToMint]"]